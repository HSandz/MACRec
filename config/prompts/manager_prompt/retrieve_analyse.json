{
    "manager_prompt": {
        "type": "template",
        "content": "Solve a {task_type} task with interleaving Thought, Action, Observation steps. Thought can reason about the current situation. Actions:\n(1) Analyse[user/item, id] — ask Analyst to analyze user/item preferences or features.\n(2) Retrieve[user_id, k] — ask Retriever to fetch top-k candidate items for a user (k optional, default 6).\n(3) Finish[response] — finish the task and return the response to the user.\n\nCRITICAL RULE: For 'rr' (retrieve & rank) tasks, you MUST follow this workflow:\n1. Use Analyse[user, user_id] to analyze the user's preferences and characteristics\n2. Use Retrieve[user_id, 6] to get candidate items with their attributes\n3. Use Analyse[item, item_id] to analyze ALL retrieved candidate items for comprehensive understanding\n4. Rank the candidates using systematic scoring based on user preferences and ratings\n5. Use Finish with your ranked list\n\nRANKING METHODOLOGY: When ranking items, use this systematic approach:\n1. Calculate genre preference scores: For each genre in the user's history, assign weights based on average ratings\n   - Genres from 5-star movies: weight = 1.0\n   - Genres from 4-star movies: weight = 0.8\n   - Genres from 3-star movies: weight = 0.6\n   - Genres from 2-star movies: weight = 0.4\n   - Genres from 1-star movies: weight = 0.2\n2. Score each candidate item by summing weights of matching genres\n3. Rank items by total score (highest first)\n4. Break ties by considering item popularity or additional features\n\nVALIDATION: Before using Finish, ensure you have analyzed ALL 6 retrieved items. The minimum required steps for 'rr' tasks are:\n- 1 step: Analyse[user, user_id]\n- 1 step: Retrieve[user_id, 6]\n- 6 steps: Analyse[item, item_id] for each retrieved item\n- 1 step: Finish[ranked_list]\nTotal: Minimum 9 steps required\n\nNOTE: The retriever provides item attributes, but Analyse actions are REQUIRED to understand user preferences and item characteristics for proper ranking. For 'rr' tasks, you MUST analyze ALL retrieved items (typically 6 items) before ranking them.\n\nYou can take at most {max_step} steps.\n\nCRITICAL: Generate ONLY the next single step as requested. Do NOT include multiple steps, future thoughts/actions/observations, examples, or extra text. STOP immediately after generating the single step.\n{examples}\n\nInput:\n{input}\n{scratchpad}"
    },
    "manager_prompt_json": {
        "type": "template",
        "content": "Solve a {task_type} task with interleaving Thought, Action, Observation steps. Thought can reason about the current situation. Actions (JSON):\n(1) {{\"type\": \"Analyse\", \"content\": [\"user\"|\"item\", id]}} — ask Analyst to analyze user/item preferences or features.\n(2) {{\"type\": \"Retrieve\", \"content\": [user_id, k]}} — ask Retriever to fetch top-k candidate items for a user (k optional, default 6).\n(3) {{\"type\": \"Finish\", \"content\": response}} — finish the task and return the response to the user.\n\nCRITICAL RULE: For 'rr' (retrieve & rank) tasks, you MUST follow this workflow:\n1. Use {{\"type\": \"Analyse\", \"content\": [\"user\", user_id]}} to analyze the user's preferences and characteristics\n2. Use {{\"type\": \"Retrieve\", \"content\": [user_id, 6]}} to get candidate items with their attributes\n3. Use {{\"type\": \"Analyse\", \"content\": [\"item\", item_id]}} to analyze ALL retrieved candidate items for comprehensive understanding\n4. Rank the candidates using systematic scoring based on user preferences and ratings\n5. Use {{\"type\": \"Finish\", \"content\": response}} with your ranked list\n\nRANKING METHODOLOGY: When ranking items, use this systematic approach:\n1. Calculate genre preference scores: For each genre in the user's history, assign weights based on average ratings\n   - Genres from 5-star movies: weight = 1.0\n   - Genres from 4-star movies: weight = 0.8\n   - Genres from 3-star movies: weight = 0.6\n   - Genres from 2-star movies: weight = 0.4\n   - Genres from 1-star movies: weight = 0.2\n2. Score each candidate item by summing weights of matching genres\n3. Rank items by total score (highest first)\n4. Break ties by considering item popularity or additional features\n5. Always provide explicit scoring rationale in your thoughts before using Finish\n\nVALIDATION: Before using Finish, ensure you have analyzed ALL 6 retrieved items. The minimum required steps for 'rr' tasks are:\n- 1 step: {{\"type\": \"Analyse\", \"content\": [\"user\", user_id]}}\n- 1 step: {{\"type\": \"Retrieve\", \"content\": [user_id, 6]}}\n- 6 steps: {{\"type\": \"Analyse\", \"content\": [\"item\", item_id]}} for each retrieved item\n- 1 step: {{\"type\": \"Finish\", \"content\": response}}\nTotal: Minimum 9 steps required\n\nNOTE: The retriever provides item attributes, but Analyse actions are REQUIRED to understand user preferences and item characteristics for proper ranking. For 'rr' tasks, you MUST analyze ALL retrieved items (typically 6 items) before ranking them.\n\nYou can take at most {max_step} steps.\n\nCRITICAL: Generate ONLY ONE JSON action for this step. Do NOT include multiple actions, future thoughts/observations, examples, or extra text. FORMAT EXAMPLES: {{\"type\": \"Analyse\", \"content\": [\"user\", 821]}}, {{\"type\": \"Analyse\", \"content\": [\"item\", 151]}}, {{\"type\": \"Retrieve\", \"content\": [821, 6]}}, {{\"type\": \"Finish\", \"content\": [1063, 151, 274, 225, 609, 25]}}. STOP immediately after generating the single JSON action.\n{examples}\n\nInput:\n{input}\n{scratchpad}"
    },
    "hint": {
        "type": "raw",
        "content": "This is the final step. You should use Finish Action to finish the task."
    },
    "valid_action_example": {
        "type": "raw",
        "content": "Finish[{finish}]\nAnalyse[user, USER_ID]\nAnalyse[item, ITEM_ID]\nRetrieve[USER_ID, 6]"
    },
    "valid_action_example_json": {
        "type": "raw",
        "content": "{{\"type\": \"Finish\", \"content\": {finish}}}\n{{\"type\": \"Analyse\", \"content\": [\"user\", USER_ID]}}\n{{\"type\": \"Analyse\", \"content\": [\"item\", ITEM_ID]}}\n{{\"type\": \"Retrieve\", \"content\": [USER_ID, 6]}}"
    }
}
